/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Author: chrisgreig (https://sketchfab.com/chrisgreig)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/macbook-pro-13-inch-0afdcc7725ff4ab4b5ac972a773f16dc

  Remixed and animated by: johnny madigan
*/

import { Clock, Group } from "three";
import MacbookKeyboard from "./Macbook.Keyboard";
import { useFrame, useThree } from "@react-three/fiber";
import React, { useEffect, useRef, useState } from "react";
import { useGesture } from "react-use-gesture";
import MacbookScreen from "./Macbook.Screen";
import _debounce from "lodash/debounce";
import { useScroll } from "@react-three/drei";

export function Macbook({
  videoSource,
  canvasRef,
}: {
  videoSource: string;
  canvasRef: React.RefObject<HTMLCanvasElement>;
}) {
  const groupRef = useRef<Group>(null);

  // ANIMATE
  let spinCount = 0;
  const numOfSpins = 1;
  const spinSpeed = 40;
  const clock = new Clock();
  const idleSpeed = 2;

  useFrame(() => {
    if (groupRef.current) {
      if (spinCount < 360 * numOfSpins) {
        // Spin into scene on render
        groupRef.current.rotation.y += (spinSpeed * Math.PI) / 180; // Convert degrees to radians
        spinCount += spinSpeed;
      } else {
        // Idle animation: oscillate between -+ degrees
        let time = clock.getElapsedTime() / idleSpeed;
        groupRef.current.rotation.y = (Math.sin(time) * Math.PI) / 5; // higher the dividing value, smaller the angle
        groupRef.current.rotation.x = (Math.cos(time) * Math.PI) / 30; // higher the dividing value, smaller the angle
      }
    }
  });

  // GESTURES
  const minDistance = -50;
  const maxDistance = 30;
  const maxHeightPercent = 0.4; // % of site height (document.body.clientHeight)

  const bind = useGesture(
    {
      onWheel: ({ delta: [, deltaY] }) => {
        if (scroll.offset < maxHeightPercent) {
          if (groupRef.current) {
            const newPositionZ = Math.max(
              Math.min(groupRef.current.position.z + deltaY * 0.1, maxDistance),
              minDistance
            );
            groupRef.current.position.z = newPositionZ;

            // let newPositionZ = currentPosition;
            // if (newPositionZ >= maxDistance) newPositionZ = maxDistance;
            // if (newPositionZ <= minDistance) newPositionZ = minDistance;

            // console.log("new z", newPositionZ);
            // console.log("scroll%", scrollPercentage);
            // console.log("document height", documentHeight);
            // console.log("scroll offset", scroll.offset);
          }
        }
      },
    },
    { domTarget: window }
  );

  // Inside your component...
  const scroll = useScroll();

  return (
    // @ts-ignore TODO: research this TS error more...
    <group
      dispose={null}
      ref={groupRef}
      position={[0, -1, -50]}
      rotation={[-50, 0, 0]}
      scale={[0.01, 0.01, 0.01]}
      {...bind()}
    >
      <MacbookScreen videoSource={videoSource} />
      <MacbookKeyboard />
    </group>
  );
}
